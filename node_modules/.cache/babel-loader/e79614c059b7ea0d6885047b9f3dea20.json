{"ast":null,"code":"// import { useState } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Create","map":{"version":3,"sources":["/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/Create.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { useState } from 'react'\n\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Create\n"]},"metadata":{},"sourceType":"module"}