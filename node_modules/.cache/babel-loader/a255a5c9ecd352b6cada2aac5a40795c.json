{"ast":null,"code":"var _jsxFileName = \"/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/MyListedItems.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction renderSoldItems(items) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sold\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      xs: 1,\n      md: 2,\n      lg: 4,\n      className: \"g-4 py-3\",\n      children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n        className: \"overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: item.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            children: [\"For \", ethers.utils.formatEther(item.totalPrice), \" ETH - Recieved \", ethers.utils.formatEther(item.price), \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default function MyListedItems(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    marketplace,\n    nft,\n    account\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [listedItems, setListedItems] = useState([]);\n  const [soldItems, setSoldItems] = useState([]);\n  const [ipfsHash, setIpfsHash] = useState(\"\"); // initialize state variable\n\n  const metadata = \"\";\n\n  const loadListedItems = async () => {\n    _s();\n\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount();\n    let listedItems = [];\n    let soldItems = [];\n\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx);\n\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n        // const uri = await nft.tokenURI(i.tokenId)\n        // const uri = \"https://cloudflare-ipfs.com/ipfs/QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\";\n        // const response = await fetch(uri);\n        // const metadata = await response.json();\n        // const metadata = await response.json()\n        // set the state variable with the IPFS hash, e.g. on component mount or after some user action\n        useEffect(() => {\n          setIpfsHash(\"QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\");\n        }, []); // construct URI and fetch data when ipfsHash state variable changes\n\n        useEffect(() => {\n          const uri = `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`;\n\n          const fetchData = async () => {\n            try {\n              const response = await fetch(uri);\n              metadata = await response.json();\n              console.log(metadata); // do something with the metadata\n            } catch (error) {\n              console.error(error);\n            }\n          };\n\n          fetchData();\n        }, [ipfsHash]);\n        const totalPrice = await marketplace.getTotalPrice(i.itemId); // define listed item object\n\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        };\n        listedItems.push(item); // Add listed item to sold items array if sold\n\n        if (i.sold) soldItems.push(item);\n      }\n    }\n\n    setLoading(false);\n    setListedItems(listedItems);\n    setSoldItems(soldItems);\n  };\n\n  _s(loadListedItems, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n  useEffect(() => {\n    loadListedItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: listedItems.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 py-3 container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Listed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-3\",\n        children: listedItems.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: [ethers.utils.formatEther(item.totalPrice), \" ETH\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), soldItems.length > 0 && renderSoldItems(soldItems)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No listed assets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MyListedItems, \"jcM/UZl+XMvqfT1VBwx8rOo8TII=\");\n\n_c = MyListedItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyListedItems\");","map":{"version":3,"sources":["/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/MyListedItems.js"],"names":["useState","useEffect","ethers","Row","Col","Card","renderSoldItems","items","map","item","idx","image","utils","formatEther","totalPrice","price","MyListedItems","marketplace","nft","account","loading","setLoading","listedItems","setListedItems","soldItems","setSoldItems","ipfsHash","setIpfsHash","metadata","loadListedItems","itemCount","indx","i","seller","toLowerCase","uri","fetchData","response","fetch","json","console","log","error","getTotalPrice","itemId","name","description","push","sold","padding","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,iBAA/B;;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,EAAE,EAAE,CAAhB;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAA0B,MAAA,SAAS,EAAC,UAApC;AAAA,gBACGA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,kBACT,QAAC,GAAD;AAAe,QAAA,SAAS,EAAC,iBAAzB;AAAA,+BACE,QAAC,IAAD;AAAA,kCACE,QAAC,IAAD,CAAM,GAAN;AAAU,YAAA,OAAO,EAAC,KAAlB;AAAwB,YAAA,GAAG,EAAED,IAAI,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,MAAN;AAAA,+BACOT,MAAM,CAACU,KAAP,CAAaC,WAAb,CAAyBJ,IAAI,CAACK,UAA9B,CADP,sBACkEZ,MAAM,CAACU,KAAP,CAAaC,WAAb,CAAyBJ,IAAI,CAACM,KAA9B,CADlE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAUL,GAAV;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAiBD;;AAED,eAAe,SAASM,aAAT,OAAsD;AAAA;;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,GAAf;AAAoBC,IAAAA;AAApB,GAA+B;AACnE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,EAAD,CAAxC,CAJmE,CAIrB;;AAChD,QAAM4B,QAAQ,GAAE,EAAhB;;AACE,QAAMC,eAAe,GAAG,YAAY;AAAA;;AAClC;AACA,UAAMC,SAAS,GAAG,MAAMb,WAAW,CAACa,SAAZ,EAAxB;AACA,QAAIR,WAAW,GAAG,EAAlB;AACA,QAAIE,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIO,IAAI,GAAG,CAAhB,EAAmBA,IAAI,IAAID,SAA3B,EAAsCC,IAAI,EAA1C,EAA8C;AAC5C,YAAMC,CAAC,GAAG,MAAMf,WAAW,CAACV,KAAZ,CAAkBwB,IAAlB,CAAhB;;AACA,UAAIC,CAAC,CAACC,MAAF,CAASC,WAAT,OAA2Bf,OAA/B,EAAwC;AACtC;AACD;AAEC;AACA;AACA;AACA;AAEA;AACAlB,QAAAA,SAAS,CAAC,MAAM;AACd0B,UAAAA,WAAW,CAAC,gDAAD,CAAX;AACD,SAFQ,EAEN,EAFM,CAAT,CAVsC,CActC;;AACA1B,QAAAA,SAAS,CAAC,MAAM;AACd,gBAAMkC,GAAG,GAAI,oCAAmCT,QAAS,EAAzD;;AACA,gBAAMU,SAAS,GAAG,YAAY;AAC5B,gBAAI;AACF,oBAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACCP,cAAAA,QAAQ,GAAG,MAAMS,QAAQ,CAACE,IAAT,EAAjB;AACDC,cAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EAHE,CAIF;AACD,aALD,CAKE,OAAOc,KAAP,EAAc;AACdF,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD;AACF,WATD;;AAUAN,UAAAA,SAAS;AACV,SAbQ,EAaN,CAACV,QAAD,CAbM,CAAT;AAcA,cAAMZ,UAAU,GAAG,MAAMG,WAAW,CAAC0B,aAAZ,CAA0BX,CAAC,CAACY,MAA5B,CAAzB,CA7BsC,CA8BtC;;AACA,YAAInC,IAAI,GAAG;AACTK,UAAAA,UADS;AAETC,UAAAA,KAAK,EAAEiB,CAAC,CAACjB,KAFA;AAGT6B,UAAAA,MAAM,EAAEZ,CAAC,CAACY,MAHD;AAITC,UAAAA,IAAI,EAAEjB,QAAQ,CAACiB,IAJN;AAKTC,UAAAA,WAAW,EAAElB,QAAQ,CAACkB,WALb;AAMTnC,UAAAA,KAAK,EAAEiB,QAAQ,CAACjB;AANP,SAAX;AAQAW,QAAAA,WAAW,CAACyB,IAAZ,CAAiBtC,IAAjB,EAvCsC,CAwCtC;;AACA,YAAIuB,CAAC,CAACgB,IAAN,EAAYxB,SAAS,CAACuB,IAAV,CAAetC,IAAf;AACb;AACF;;AACDY,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,cAAc,CAACD,WAAD,CAAd;AACAG,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,GAtDD;;AANmE,KAM7DK,eAN6D;;AA6DnE5B,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAIT,OAAJ,EAAa,oBACX;AAAM,IAAA,KAAK,EAAE;AAAE6B,MAAAA,OAAO,EAAE;AAAX,KAAb;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADW;AAKb,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,cACG3B,WAAW,CAAC4B,MAAZ,GAAqB,CAArB,gBACC;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,EAAE,EAAE,CAAhB;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAA0B,QAAA,SAAS,EAAC,UAApC;AAAA,kBACG5B,WAAW,CAACd,GAAZ,CAAgB,CAACC,IAAD,EAAOC,GAAP,kBACf,QAAC,GAAD;AAAe,UAAA,SAAS,EAAC,iBAAzB;AAAA,iCACE,QAAC,IAAD;AAAA,oCACE,QAAC,IAAD,CAAM,GAAN;AAAU,cAAA,OAAO,EAAC,KAAlB;AAAwB,cAAA,GAAG,EAAED,IAAI,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,MAAN;AAAA,yBAAcT,MAAM,CAACU,KAAP,CAAaC,WAAb,CAAyBJ,IAAI,CAACK,UAA9B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAAUJ,GAAV;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF,EAYKc,SAAS,CAAC0B,MAAV,GAAmB,CAAnB,IAAwB5C,eAAe,CAACkB,SAAD,CAZ5C;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAgBG;AAAM,MAAA,KAAK,EAAE;AAAEyB,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAjBN;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;IA7FuBjC,a;;KAAAA,a","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nfunction renderSoldItems(items) {\n  return (\n    <>\n      <h2>Sold</h2>\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n        {items.map((item, idx) => (\n          <Col key={idx} className=\"overflow-hidden\">\n            <Card>\n              <Card.Img variant=\"top\" src={item.image} />\n              <Card.Footer>\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n              </Card.Footer>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [listedItems, setListedItems] = useState([])\n  const [soldItems, setSoldItems] = useState([])\n  const [ipfsHash, setIpfsHash] = useState(\"\"); // initialize state variable\nconst metadata =\"\";\n  const loadListedItems = async () => {\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount()\n    let listedItems = []\n    let soldItems = []\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx)\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n       // const uri = await nft.tokenURI(i.tokenId)\n\n        // const uri = \"https://cloudflare-ipfs.com/ipfs/QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\";\n        // const response = await fetch(uri);\n        // const metadata = await response.json();\n        // const metadata = await response.json()\n       \n        // set the state variable with the IPFS hash, e.g. on component mount or after some user action\n        useEffect(() => {\n          setIpfsHash(\"QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\");\n        }, []);\n        \n        // construct URI and fetch data when ipfsHash state variable changes\n        useEffect(() => {\n          const uri = `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`;\n          const fetchData = async () => {\n            try {\n              const response = await fetch(uri);\n               metadata = await response.json();\n              console.log(metadata);\n              // do something with the metadata\n            } catch (error) {\n              console.error(error);\n            }\n          };\n          fetchData();\n        }, [ipfsHash]);\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\n        // define listed item object\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        }\n        listedItems.push(item)\n        // Add listed item to sold items array if sold\n        if (i.sold) soldItems.push(item)\n      }\n    }\n    setLoading(false)\n    setListedItems(listedItems)\n    setSoldItems(soldItems)\n  }\n  useEffect(() => {\n    loadListedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {listedItems.length > 0 ?\n        <div className=\"px-5 py-3 container\">\n            <h2>Listed</h2>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n            {listedItems.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n            {soldItems.length > 0 && renderSoldItems(soldItems)}\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}