{"ast":null,"code":"var _jsxFileName = \"/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState([]);\n  const [email, setEmail] = useState('');\n  const [emailValid, setEmailValid] = useState(false);\n\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount();\n    let items = [];\n\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i);\n\n      if (!item.sold) {\n        const test = await nft.tokenURI(item.tokenId);\n        const ipfsHash = test.split(\"ipfs/\")[1];\n        console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n\n        const uri = \"https://cloudflare-ipfs.com/ipfs/\" + ipfsHash;\n        console.log(uri);\n        const response = await fetch(uri);\n        const metadata = await response.json(); // get uri url from nft contract\n        // const uri = await nft.tokenURI(item.tokenId)\n        // // use uri to fetch the nft metadata stored on ipfs \n        // const response = await fetch(uri)\n        // const metadata = await response.json()\n        // get total price of item (item price + fee)\n\n        const totalPrice = await marketplace.getTotalPrice(item.itemId); // Add item to items array\n\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        });\n      }\n    }\n\n    setLoading(false);\n    setItems(items);\n  };\n\n  const validateEmail = email => {\n    // Simple email validation using regex\n    const regex = /\\S+@\\S+\\.\\S+/;\n    return regex.test(email);\n  };\n\n  const handleEmailChange = event => {\n    const newEmail = event.target.value;\n    setEmail(newEmail);\n    setEmailValid(validateEmail(newEmail));\n  };\n\n  const buyMarketItem = async item => {\n    if (!emailValid) {\n      alert('Please enter a valid email address.');\n      return;\n    }\n\n    await (await marketplace.purchaseItem(item.itemId, {\n      value: item.totalPrice\n    })).wait();\n    setEmail('');\n    setEmailValid(false);\n    loadMarketplaceItems();\n  };\n\n  useEffect(() => {\n    loadMarketplaceItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: items.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 container\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-5\",\n        children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              color: \"secondary\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: item.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"quantity\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Quantity:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    defaultValue: 1,\n                    min: 1,\n                    max: 10\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => addToCart(item),\n                  children: \"Add to Cart\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-5\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No items found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"9fCIF3Z9PalhjRRSWrlxr6O4yzU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Home.js"],"names":["useState","useEffect","ethers","Row","Col","Card","Button","Home","marketplace","nft","loading","setLoading","items","setItems","email","setEmail","emailValid","setEmailValid","loadMarketplaceItems","itemCount","i","item","sold","test","tokenURI","tokenId","ipfsHash","split","console","log","uri","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","push","seller","name","description","image","validateEmail","regex","handleEmailChange","event","newEmail","target","value","buyMarketItem","alert","purchaseItem","wait","padding","length","map","idx","addToCart"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\n\nconst Home = ({ marketplace, nft }) => {\n  const [loading, setLoading] = useState(true)\n  const [items, setItems] = useState([])\n  const [email, setEmail] = useState('')\n  const [emailValid, setEmailValid] = useState(false)\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount()\n    let items = []\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i)\n      if (!item.sold) {\n        const test = await nft.tokenURI(item.tokenId)\n       const ipfsHash = test.split(\"ipfs/\")[1];\n       console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n        const uri = \"https://cloudflare-ipfs.com/ipfs/\"+ipfsHash;\n        console.log(uri);\n        const response = await fetch(uri);\n        const metadata = await response.json()\n        // get uri url from nft contract\n        // const uri = await nft.tokenURI(item.tokenId)\n        // // use uri to fetch the nft metadata stored on ipfs \n        // const response = await fetch(uri)\n        // const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(item.itemId)\n        // Add item to items array\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        })\n      }\n    }\n    setLoading(false)\n    setItems(items)\n  }\n  const validateEmail = (email) => {\n    // Simple email validation using regex\n    const regex = /\\S+@\\S+\\.\\S+/\n    return regex.test(email)\n  }\n\n  const handleEmailChange = (event) => {\n    const newEmail = event.target.value\n    setEmail(newEmail)\n    setEmailValid(validateEmail(newEmail))\n  }\n\n  const buyMarketItem = async (item) => {\n    if (!emailValid) {\n      alert('Please enter a valid email address.')\n      return\n    }\n    await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n    setEmail('')\n    setEmailValid(false)\n    loadMarketplaceItems() \n   }\n\n  useEffect(() => {\n    loadMarketplaceItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {items.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {items.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Body color=\"secondary\">\n                    <Card.Title>{item.name}</Card.Title>\n                    <Card.Text>\n                      {item.description}\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer>\n                    <Form>\n                      <Form.Group controlId=\"quantity\">\n                        <Form.Label>Quantity:</Form.Label>\n                        <Form.Control type=\"number\" defaultValue={1} min={1} max={10} />\n                      </Form.Group>\n                      <Button variant=\"primary\" onClick={() => addToCart(item)}>Add to Cart</Button>\n                    </Form>\n                  </Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        :\n        <div className=\"text-center py-5\">\n          <h2>No items found</h2>\n        </div>\n      }\n    </div>\n  );\n\n}\nexport default Home"]},"metadata":{},"sourceType":"module"}