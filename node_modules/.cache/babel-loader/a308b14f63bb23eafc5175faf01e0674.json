{"ast":null,"code":"var _jsxFileName = \"/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/MyPurchases.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyPurchases(_ref) {\n  _s();\n\n  let {\n    marketplace,\n    nft,\n    account\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [purchases, setPurchases] = useState([]);\n\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter = marketplace.filters.Bought(null, null, null, null, null, account);\n    const results = await marketplace.queryFilter(filter); //Fetch metadata of each nft and add that to listedItem object.\n\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args; // get uri url from nft contract\n\n      const test = await nft.tokenURI(i.tokenId);\n      const ipfsHash = test.split(\"ipfs/\")[1];\n      console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n\n      const uri = \"https://cloudflare-ipfs.com/ipfs/\" + ipfsHash;\n      console.log(uri);\n      const response = await fetch(uri);\n      const metadata = await response.json(); // const uri = await nft.tokenURI(i.tokenId)\n      // // use uri to fetch the nft metadata stored on ipfs \n      // const response = await fetch(uri)\n      // const metadata = await response.json()\n      // // get total price of item (item price + fee)\n\n      const totalPrice = await marketplace.getTotalPrice(i.itemId); // define listed item object\n\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      };\n      return purchasedItem;\n    }));\n    setLoading(false);\n    setPurchases(purchases);\n  };\n\n  useEffect(() => {\n    loadPurchasedItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: purchases.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 container\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-5\",\n        children: purchases.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: [ethers.utils.formatEther(item.totalPrice), \" ETH\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No purchases\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyPurchases, \"+bT9nvXJXwVwMkewhHc+Eyc0m60=\");\n\n_c = MyPurchases;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPurchases\");","map":{"version":3,"sources":["/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/MyPurchases.js"],"names":["useState","useEffect","ethers","Row","Col","Card","MyPurchases","marketplace","nft","account","loading","setLoading","purchases","setPurchases","loadPurchasedItems","filter","filters","Bought","results","queryFilter","Promise","all","map","i","args","test","tokenURI","tokenId","ipfsHash","split","console","log","uri","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","purchasedItem","price","name","description","image","padding","length","item","idx","utils","formatEther"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [purchases, setPurchases] = useState([])\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\n    const results = await marketplace.queryFilter(filter)\n    //Fetch metadata of each nft and add that to listedItem object.\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args\n      // get uri url from nft contract\n      const test = await nft.tokenURI(i.tokenId)\n       const ipfsHash = test.split(\"ipfs/\")[1];\n       console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n        const uri = \"https://cloudflare-ipfs.com/ipfs/\"+ipfsHash;\n        console.log(uri);\n        const response = await fetch(uri);\n        const metadata = await response.json()\n      // const uri = await nft.tokenURI(i.tokenId)\n      // // use uri to fetch the nft metadata stored on ipfs \n      // const response = await fetch(uri)\n      // const metadata = await response.json()\n      // // get total price of item (item price + fee)\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\n      // define listed item object\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      }\n      return purchasedItem\n    }))\n    setLoading(false)\n    setPurchases(purchases)\n  }\n  useEffect(() => {\n    loadPurchasedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {purchases.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {purchases.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No purchases</h2>\n          </main>\n        )}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}