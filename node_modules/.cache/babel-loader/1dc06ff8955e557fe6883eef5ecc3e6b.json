{"ast":null,"code":"var _jsxFileName = \"/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { Buffer } from 'buffer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7';\nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637';\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst client = ipfsClient.create({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n  apiPath: \"/api/v0\",\n  headers: {\n    authorization: auth\n  }\n}); // const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://cloudflare-ipfs.com/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","Buffer","projectId","projectSecret","auth","from","toString","ipfsClient","require","client","host","port","protocol","apiPath","headers","authorization","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","makeItem","maxWidth","e","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport {Buffer} from 'buffer' \nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7'; \nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637';\n\nconst auth = 'Basic ' + Buffer.from(projectId + ':'+ projectSecret).toString('base64');\n\nconst ipfsClient = require('ipfs-http-client')\nconst client = ipfsClient.create({\nhost: \"ipfs.infura.io\",\nport: 5001,\nprotocol: \"https\",\napiPath: \"/api/v0\",\nheaders: {\nauthorization: auth,\n}\n})\n\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file)\n        console.log(result)\n        setImage(`https://cloudflare-ipfs.com/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return\n    try{\n      const result = await client.add(JSON.stringify({image, price, name, description}))\n      mintThenList(result)\n    } catch(error) {\n      console.log(\"ipfs uri upload error: \", error)\n    }\n  }\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create\n"]},"metadata":{},"sourceType":"module"}