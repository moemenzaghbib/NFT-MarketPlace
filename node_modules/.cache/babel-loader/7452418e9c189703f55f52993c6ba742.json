{"ast":null,"code":"var _jsxFileName = \"/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/Create.js\",\n    _s = $RefreshSig$();\n\n// import { useState } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Create\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client'; // const client = ipfsHttpClient({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n//   headers: {\n//     authorization: `Bearer ${\"2NZDIWph4XMGKmU8F8PmLkhqki7\"}`,\n//   },\n// })\n\nimport { ipfsClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7';\nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637';\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\nconst client = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/api/v0/',\n  headers: {\n    authorization: auth\n  }\n});\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        // const result = await client.add(file)\n        // console.log(result)\n        let result = client.add(file).then(result => {\n          console.log(result);\n        });\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","ipfsClient","projectId","projectSecret","ipfs","host","port","protocol","auth","Buffer","from","toString","client","apiPath","headers","authorization","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","then","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","makeItem","maxWidth","e","value"],"mappings":"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","sourcesContent":["// import { useState } from 'react'\n\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Create\nimport { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\n\n// const client = ipfsHttpClient({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n//   headers: {\n//     authorization: `Bearer ${\"2NZDIWph4XMGKmU8F8PmLkhqki7\"}`,\n//   },\n// })\n\nimport { ipfsClient  } from 'ipfs-http-client'\nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7';\nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637';\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\n\nconst client = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/api/v0/',\n  headers: {\n    authorization: auth\n  }\n})\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    if (typeof file !== 'undefined') {\n      try {\n        // const result = await client.add(file)\n        // console.log(result)\n        let result = client.add(file)\n.then(result => {\n  console.log(result);\n});\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return\n    try{\n      const result = await client.add(JSON.stringify({image, price, name, description}))\n      mintThenList(result)\n    } catch(error) {\n      console.log(\"ipfs uri upload error: \", error)\n    }\n  }\n\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create\n"]},"metadata":{},"sourceType":"module"}