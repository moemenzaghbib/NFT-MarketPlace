{"ast":null,"code":"var _jsxFileName = \"/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState([]);\n  const [email, setEmail] = useState('');\n  const [emailValid, setEmailValid] = useState(false);\n\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount();\n    let items = [];\n\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i);\n\n      if (!item.sold) {\n        const test = await nft.tokenURI(item.tokenId);\n        const ipfsHash = test.split(\"ipfs/\")[1];\n        console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n\n        const uri = \"https://cloudflare-ipfs.com/ipfs/\" + ipfsHash;\n        console.log(uri);\n        const response = await fetch(uri);\n        const metadata = await response.json(); // get uri url from nft contract\n        // const uri = await nft.tokenURI(item.tokenId)\n        // // use uri to fetch the nft metadata stored on ipfs \n        // const response = await fetch(uri)\n        // const metadata = await response.json()\n        // get total price of item (item price + fee)\n\n        const totalPrice = await marketplace.getTotalPrice(item.itemId); // Add item to items array\n\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        });\n      }\n    }\n\n    setLoading(false);\n    setItems(items);\n  };\n\n  const validateEmail = async email => {\n    // Simple email validation using regex\n    const regex = /\\S+@\\S+\\.\\S+/;\n\n    if (!regex.test(email)) {\n      return false;\n    }\n\n    return regex.test(email); // Check if the email exists in the database\n    // const response = await fetch(`/api/check-email?email=${email}`);\n    // const data = await response.json();\n    // return data.exists;\n  };\n\n  const handleEmailChange = event => {\n    const newEmail = event.target.value;\n    setEmail(newEmail);\n    setEmailValid(validateEmail(newEmail));\n  };\n\n  const buyMarketItem = async item => {\n    if (!emailValid) {\n      alert('Please enter a valid email address.');\n      return;\n    }\n\n    try {\n      try {\n        console.log('test 1');\n        const response = await fetch('http://127.0.0.1:9090/card/addCardToUser', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: item.name,\n            email: email\n          })\n        });\n\n        if (response.ok) {\n          await (await marketplace.purchaseItem(item.itemId, {\n            value: item.totalPrice\n          })).wait();\n          const data = await response.json();\n          console.log(data);\n          console.log('Card Bought successfully');\n          setEmail('');\n          setEmailValid(false);\n          loadMarketplaceItems(); // perform specific action here\n        } else {\n          console.log('Failed to add card');\n        }\n      } catch (error) {\n        console.error(error);\n      } // the purchase was successful, so you can do the specific action here \n\n    } catch (error) {\n      alert('The purchase failed```.');\n      console.log('The purchase failed');\n    }\n  };\n\n  useEffect(() => {\n    loadMarketplaceItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: items.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 container\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: handleEmailChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: \"You need to enter the Email associeted with you Elemental Oddesey Account so the transcition can happen.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-5\",\n        children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              color: \"secondary\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: item.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-grid\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => buyMarketItem(item),\n                  variant: \"primary\",\n                  size: \"lg\",\n                  children: [\"Buy for \", ethers.utils.formatEther(item.totalPrice), \" ETH\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No listed assets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"9fCIF3Z9PalhjRRSWrlxr6O4yzU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/imenbenfredj/Desktop/nft_marketplace-main/src/frontend/components/Home.js"],"names":["useState","useEffect","ethers","Row","Col","Card","Button","Form","Home","marketplace","nft","loading","setLoading","items","setItems","email","setEmail","emailValid","setEmailValid","loadMarketplaceItems","itemCount","i","item","sold","test","tokenURI","tokenId","ipfsHash","split","console","log","uri","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","push","seller","name","description","image","validateEmail","regex","handleEmailChange","event","newEmail","target","value","buyMarketItem","alert","method","headers","body","JSON","stringify","ok","purchaseItem","wait","data","error","padding","length","map","idx","utils","formatEther"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport { Form } from 'react-bootstrap';\n\nconst Home = ({ marketplace, nft }) => {\n  const [loading, setLoading] = useState(true)\n  const [items, setItems] = useState([])\n  const [email, setEmail] = useState('')\n  const [emailValid, setEmailValid] = useState(false)\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount()\n    let items = []\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i)\n      if (!item.sold) {\n        const test = await nft.tokenURI(item.tokenId)\n       const ipfsHash = test.split(\"ipfs/\")[1];\n       console.log(ipfsHash); // QmQtr6z2UnPH3TGjEPpXaCEVcssraa63oToEw9UPYC91dn\n        const uri = \"https://cloudflare-ipfs.com/ipfs/\"+ipfsHash;\n        console.log(uri);\n        const response = await fetch(uri);\n        const metadata = await response.json()\n        // get uri url from nft contract\n        // const uri = await nft.tokenURI(item.tokenId)\n        // // use uri to fetch the nft metadata stored on ipfs \n        // const response = await fetch(uri)\n        // const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(item.itemId)\n        // Add item to items array\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        })\n      }\n    }\n    setLoading(false)\n    setItems(items)\n  }\n  const validateEmail = async (email) => {\n    // Simple email validation using regex\n    const regex = /\\S+@\\S+\\.\\S+/\n    if (!regex.test(email)) {\n      return false;\n    }\n    return regex.test(email)\n\n    // Check if the email exists in the database\n    // const response = await fetch(`/api/check-email?email=${email}`);\n    // const data = await response.json();\n    // return data.exists;\n  }\n\n  const handleEmailChange = (event) => {\n    const newEmail = event.target.value\n    setEmail(newEmail)\n    setEmailValid(validateEmail(newEmail))\n  }\n\n  const buyMarketItem = async (item) => {\n    if (!emailValid) {\n      alert('Please enter a valid email address.')\n      return\n    }\n    try {\n     \n        try {\n          console.log('test 1');\n\n          const response = await fetch('http://127.0.0.1:9090/card/addCardToUser', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ name: item.name,email: email})\n          });\n          if (response.ok) {\n            await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait();\n\n            const data = await response.json();\n            console.log(data);\n            console.log('Card Bought successfully');\n            setEmail('')\n            setEmailValid(false)\n            loadMarketplaceItems() \n\n            // perform specific action here\n          } else {\n            console.log('Failed to add card');\n          }\n        } catch (error) {\n          console.error(error);\n        }\n     \n      // the purchase was successful, so you can do the specific action here \n    } catch (error) {\n      alert('The purchase failed```.')\n\n      console.log('The purchase failed');\n    }   \n   }\n\n  useEffect(() => {\n    loadMarketplaceItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {items.length > 0 ?\n        <div className=\"px-5 container\">\n           <Form>\n            <Form.Group controlId=\"formEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Enter email\" value={email} onChange={handleEmailChange} />\n              <Form.Text className=\"text-muted\">\n                You need to enter the Email associeted with you Elemental Oddesey Account so the transcition can happen.\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {items.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Body color=\"secondary\">\n                    <Card.Title>{item.name}</Card.Title>\n                    <Card.Text>\n                      {item.description}\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer>\n                    <div className='d-grid'>\n                      <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n                        Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n                      </Button>\n                    </div>\n                  </Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}\nexport default Home"]},"metadata":{},"sourceType":"module"}