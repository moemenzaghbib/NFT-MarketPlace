{"ast":null,"code":"// import { useState } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Create\nconst ipfsHttpClient = require('ipfs-http-client'); // Remplacez <VOTRE_PROJECT_ID> et <VOTRE_PROJECT_SECRET> par vos identifiants Infura\n\n\nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7';\nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637'; // Connexion à l'API IPFS d'Infura avec les identifiants du projet\n\nconst ipfs = ipfsHttpClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/api/v0/',\n  headers: {\n    authorization: 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\n  }\n}); // Fonction pour télécharger une image depuis une URL et l'ajouter à IPFS\n\nasync function uploadToIPFS(url) {\n  try {\n    // Téléchargement de l'image\n    const res = await fetch(url);\n    const blob = await res.blob(); // Ajout de l'image à IPFS\n\n    const files = [{\n      path: 'image.jpg',\n      content: blob\n    }];\n    const result = await ipfs.add(files);\n    console.log(result);\n    console.log(`Image ajoutée à IPFS avec l'adresse : ${result.path}`);\n  } catch (error) {\n    console.error('Erreur lors de l\\'ajout de l\\'image à IPFS : ', error);\n  }\n}\n\nexport default Create;","map":{"version":3,"sources":["/Users/khitemmathlouthi/Desktop/nft_marketplace-main/src/frontend/components/Create.js"],"names":["ipfsHttpClient","require","projectId","projectSecret","ipfs","host","port","protocol","apiPath","headers","authorization","Buffer","from","toString","uploadToIPFS","url","res","fetch","blob","files","path","content","result","add","console","log","error","Create"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CAEA;;;AACA,MAAMC,SAAS,GAAG,6BAAlB;AACA,MAAMC,aAAa,GAAG,kCAAtB,C,CAEA;;AACA,MAAMC,IAAI,GAAGJ,cAAc,CAAC;AAC1BK,EAAAA,IAAI,EAAE,gBADoB;AAE1BC,EAAAA,IAAI,EAAE,IAFoB;AAG1BC,EAAAA,QAAQ,EAAE,OAHgB;AAI1BC,EAAAA,OAAO,EAAE,UAJiB;AAK1BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE,WAAWC,MAAM,CAACC,IAAP,CAAYV,SAAS,GAAG,GAAZ,GAAkBC,aAA9B,EAA6CU,QAA7C,CAAsD,QAAtD;AADnB;AALiB,CAAD,CAA3B,C,CAUA;;AACA,eAAeC,YAAf,CAA4BC,GAA5B,EAAiC;AAC/B,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,UAAMG,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB,CAHE,CAKF;;AACA,UAAMC,KAAK,GAAG,CACZ;AACEC,MAAAA,IAAI,EAAE,WADR;AAEEC,MAAAA,OAAO,EAAEH;AAFX,KADY,CAAd;AAMA,UAAMI,MAAM,GAAG,MAAMlB,IAAI,CAACmB,GAAL,CAASJ,KAAT,CAArB;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,yCAAwCH,MAAM,CAACF,IAAK,EAAjE;AACD,GAhBD,CAgBE,OAAOM,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACE,KAAR,CAAc,+CAAd,EAA+DA,KAA/D;AACD;AACF;;AAID,eAAeC,MAAf","sourcesContent":["// import { useState } from 'react'\n\n// import { ethers } from \"ethers\"\n// import { Row, Form, Button } from 'react-bootstrap'\n// import { create as ipfsHttpClient } from 'ipfs-http-client'\n// const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\n// const Create = ({ marketplace, nft }) => {\n//   const [image, setImage] = useState('')\n//   const [price, setPrice] = useState(null)\n//   const [name, setName] = useState('')\n//   const [description, setDescription] = useState('')\n//   const uploadToIPFS = async (event) => {\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     if (typeof file !== 'undefined') {\n//       try {\n//         const result = await client.add(file)\n//         console.log(result)\n//         setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n//       } catch (error){\n//         console.log(\"ipfs image upload error: \", error)\n//       }\n//     }\n//   }\n//   const createNFT = async () => {\n//     if (!image || !price || !name || !description) return\n//     try{\n//       const result = await client.add(JSON.stringify({image, price, name, description}))\n//       mintThenList(result)\n//     } catch(error) {\n//       console.log(\"ipfs uri upload error: \", error)\n//     }\n//   }\n//   const mintThenList = async (result) => {\n//     const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n//     // mint nft \n//     await(await nft.mint(uri)).wait()\n//     // get tokenId of new nft \n//     const id = await nft.tokenCount()\n//     // approve marketplace to spend nft\n//     await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n//     // add nft to marketplace\n//     const listingPrice = ethers.utils.parseEther(price.toString())\n//     await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n//   }\n//   return (\n//     <div className=\"container-fluid mt-5\">\n//       <div className=\"row\">\n//         <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n//           <div className=\"content mx-auto\">\n//             <Row className=\"g-4\">\n//               <Form.Control\n//                 type=\"file\"\n//                 required\n//                 name=\"file\"\n//                 onChange={uploadToIPFS}\n//               />\n//               <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n//               <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n//               <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n//               <div className=\"d-grid px-0\">\n//                 <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n//                   Create & List NFT!\n//                 </Button>\n//               </div>\n//             </Row>\n//           </div>\n//         </main>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Create\nconst ipfsHttpClient = require('ipfs-http-client');\n\n// Remplacez <VOTRE_PROJECT_ID> et <VOTRE_PROJECT_SECRET> par vos identifiants Infura\nconst projectId = '2NZDIWph4XMGKmU8F8PmLkhqki7';\nconst projectSecret = 'dafae8894e1e15719d9afcc80caab637';\n\n// Connexion à l'API IPFS d'Infura avec les identifiants du projet\nconst ipfs = ipfsHttpClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/api/v0/',\n  headers: {\n    authorization: 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\n  }\n});\n\n// Fonction pour télécharger une image depuis une URL et l'ajouter à IPFS\nasync function uploadToIPFS(url) {\n  try {\n    // Téléchargement de l'image\n    const res = await fetch(url);\n    const blob = await res.blob();\n\n    // Ajout de l'image à IPFS\n    const files = [\n      {\n        path: 'image.jpg',\n        content: blob\n      }\n    ];\n    const result = await ipfs.add(files);\n\n    console.log(result);\n    console.log(`Image ajoutée à IPFS avec l'adresse : ${result.path}`);\n  } catch (error) {\n    console.error('Erreur lors de l\\'ajout de l\\'image à IPFS : ', error);\n  }\n}\n\n\n\nexport default Create\n"]},"metadata":{},"sourceType":"module"}